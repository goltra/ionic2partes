"use strict";
var template_1 = require('../template');
var template_2 = require('../template');
describe('template', function () {
    describe('inlineTemplate', function () {
        it('should do nothing for files with incomplete Component', function () {
            var sourceText = "\n        // Component this be bork\n      ";
            var sourcePath = 'somefile.ts';
            var output = template_1.inlineTemplate(sourceText, sourcePath);
            expect(output).toEqual(sourceText);
        });
        it('should do nothing for files with incomplete Component', function () {
            var sourceText = "\n        // Component this be bork\n      ";
            var sourcePath = 'somefile.ts';
            var output = template_1.inlineTemplate(sourceText, sourcePath);
            expect(output).toEqual(sourceText);
        });
        it('should do nothing for files without Component', function () {
            var sourceText = "\n        console.log('yeah nothing');\n      ";
            var sourcePath = 'somefile.ts';
            var output = template_1.inlineTemplate(sourceText, sourcePath);
            expect(output).toEqual(sourceText);
        });
        describe('replaceTemplateUrl', function () {
            it('should turn the template into one line', function () {
                var str = "\n          Component({\n            templateUrl: \"somepage.html\"})";
                var templateContent = "\n          <div>\t\n            this is \"multiline\" 'content'\n          </div>\r\n        ";
                var htmlFilePath = '/full/path/to/somepage.html';
                var match = template_2.getTemplateMatch(str);
                var result = template_1.replaceTemplateUrl(match, htmlFilePath, templateContent);
                var expected = "Component({template:/*ion-inline-start:\"/full/path/to/somepage.html\"*/'\\n          <div>\t\\n            this is \"multiline\" \\'content\\'\\n          </div>\\n\\n        '/*ion-inline-end:\"/full/path/to/somepage.html\"*/})";
                expect(result).toEqual(expected);
            });
        });
        describe('replaceBundleJsTemplate', function () {
            it('should replace already inlined template with new content', function () {
                var htmlFilePath = 'c:\\path/to\some/crazy:thing.html;';
                var oldContent = 'some old content';
                var tmplate = template_2.getTemplateFormat(htmlFilePath, oldContent);
                var bundleSourceText = "\n          @Component({\n            selector: 'yo-div',\n            /*blah*/" + tmplate + "/*derp*/\n          })\n          @Component({\n            selector: 'yo-div2',\n            /*222*/" + tmplate + "/*2222*/\n          })\n        ";
                var newContent = 'some new content';
                var output = template_2.replaceBundleJsTemplate(bundleSourceText, newContent, htmlFilePath);
                expect(output.indexOf(newContent)).toEqual(141);
                expect(output.indexOf(newContent, 142)).toEqual(373);
            });
        });
        describe('COMPONENT_REGEX match', function () {
            it('should get Component with template url and selector above', function () {
                var str = "\n          Component({\n            selector: 'page-home',\n            templateUrl: 'home.html'\n          })\n        ";
                var match = template_2.getTemplateMatch(str);
                expect(match.templateUrl).toEqual('home.html');
            });
            it('should get Component with template url and selector below', function () {
                var str = "\n          Component({\n            templateUrl: 'home.html',\n            selector: 'page-home\n          })\n        ";
                var match = template_2.getTemplateMatch(str);
                expect(match.templateUrl).toEqual('home.html');
            });
            it('should get Component with template url, spaces, tabs and new lines', function () {
                var str = "\t\n\r\n          Component(\n            {\n\n              templateUrl :\n                \t\n\r\"c:\\somewindowspath.ts\"\n\n            }\n          )\n        ";
                var match = template_2.getTemplateMatch(str);
                expect(match.templateUrl).toEqual('c:\\some\windows\path.ts');
            });
            it('should get Component with template url and spaces', function () {
                var str = '  Component  (  {  templateUrl  :  `  hi  `  }  )  ';
                var match = template_2.getTemplateMatch(str);
                expect(match.component).toEqual('Component  (  {  templateUrl  :  `  hi  `  }  )');
                expect(match.templateProperty).toEqual('  templateUrl  :  `  hi  `');
                expect(match.templateUrl).toEqual('hi');
            });
            it('should get Component with template url and back-ticks', function () {
                var str = 'Component({templateUrl:`hi`})';
                var match = template_2.getTemplateMatch(str);
                expect(match.component).toEqual('Component({templateUrl:`hi`})');
                expect(match.templateProperty).toEqual('templateUrl:`hi`');
                expect(match.templateUrl).toEqual('hi');
            });
            it('should get Component with template url and double quotes', function () {
                var str = 'Component({templateUrl:"hi"})';
                var match = template_2.getTemplateMatch(str);
                expect(match.component).toEqual('Component({templateUrl:"hi"})');
                expect(match.templateProperty).toEqual('templateUrl:"hi"');
                expect(match.templateUrl).toEqual('hi');
            });
            it('should get Component with template url and single quotes', function () {
                var str = 'Component({templateUrl:\'hi\'})';
                var match = template_2.getTemplateMatch(str);
                expect(match.component).toEqual('Component({templateUrl:\'hi\'})');
                expect(match.templateProperty).toEqual('templateUrl:\'hi\'');
                expect(match.templateUrl).toEqual('hi');
            });
            it('should get null for Component without string for templateUrl', function () {
                var str = 'Component({templateUrl:someVar})';
                var match = template_2.getTemplateMatch(str);
                expect(match).toEqual(null);
            });
            it('should get null for Component without templateUrl', function () {
                var str = 'Component({template:"hi"})';
                var match = template_2.getTemplateMatch(str);
                expect(match).toEqual(null);
            });
            it('should get null for Component without brackets', function () {
                var str = 'Component()';
                var match = template_2.getTemplateMatch(str);
                expect(match).toEqual(null);
            });
            it('should get null for Component without parentheses', function () {
                var str = 'Component';
                var match = template_2.getTemplateMatch(str);
                expect(match).toEqual(null);
            });
            it('should get null for Component({})', function () {
                var str = 'Component';
                var match = template_2.getTemplateMatch(str);
                expect(match).toEqual(null);
            });
            it('should get null for no Component', function () {
                var str = 'whatever';
                var match = template_2.getTemplateMatch(str);
                expect(match).toEqual(null);
            });
        });
    });
});

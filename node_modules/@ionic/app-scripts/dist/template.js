"use strict";
var logger_1 = require('./util/logger');
var bundle_1 = require('./bundle');
var path_1 = require('path');
var helpers_1 = require('./util/helpers');
var fs_1 = require('fs');
var sass_1 = require('./sass');
var MagicString = require('magic-string');
function templateUpdate(event, path, context) {
    path = path_1.join(context.rootDir, path);
    var logger = new logger_1.Logger('template update');
    return templateUpdateWorker(event, path, context)
        .then(function () {
        logger.finish();
    })
        .catch(function (err) {
        throw logger.fail(err);
    });
}
exports.templateUpdate = templateUpdate;
function templateUpdateWorker(event, path, context) {
    logger_1.Logger.debug("templateUpdate, event: " + event + ", path: " + path);
    if (event === 'change') {
        if (updateBundledJsTemplate(context, path)) {
            logger_1.Logger.debug("templateUpdate, updated js bundle, path: " + path);
            return Promise.resolve();
        }
    }
    // not sure how it changed, just do a full rebuild without the bundle cache
    context.useBundleCache = false;
    return bundle_1.bundleUpdate(event, path, context)
        .then(function () {
        context.useSassCache = true;
        return sass_1.sassUpdate(event, path, context);
    })
        .catch(function (err) {
        throw new logger_1.BuildError(err);
    });
}
function getSourceComponentFile(htmlFilePath, context) {
    var rtn = null;
    try {
        var changedHtmlFilename = path_1.basename(htmlFilePath);
        var componentDir = path_1.dirname(htmlFilePath);
        var filePaths = fs_1.readdirSync(componentDir);
        var match = void 0;
        for (var i = 0; i < filePaths.length; i++) {
            var filePath = filePaths[i];
            if (helpers_1.endsWith(filePath, '.ts') && !helpers_1.endsWith(filePath, '.d.ts')) {
                // found a .ts file in this same directory
                // open it up and see if it's a component
                // and see if it has a template url with the same filename
                var tsComponentFile = path_1.join(componentDir, filePath);
                var source = fs_1.readFileSync(path_1.join(componentDir, filePath)).toString();
                if (match = getTemplateMatch(source)) {
                    var componentHtmlFilename = path_1.basename(match.templateUrl);
                    if (changedHtmlFilename === componentHtmlFilename) {
                        rtn = tsComponentFile;
                        break;
                    }
                }
            }
        }
    }
    catch (e) {
        logger_1.Logger.debug(getSourceComponentFile + " " + e);
    }
    return rtn;
}
function inlineTemplate(sourceText, sourcePath) {
    var magicString = new MagicString(sourceText);
    var componentDir = path_1.parse(sourcePath).dir;
    var match;
    var replacement;
    var lastStart = -1;
    while (match = getTemplateMatch(magicString.toString())) {
        if (match.start === lastStart) {
            // panic! we don't want to melt any machines if there's a bug
            logger_1.Logger.debug("Error matching component: " + match.component);
            return magicString.toString();
        }
        lastStart = match.start;
        if (match.templateUrl === '') {
            logger_1.Logger.error("Error @Component templateUrl missing in: \"" + sourcePath + "\"");
            return magicString.toString();
        }
        replacement = updateTemplate(componentDir, match);
        if (replacement) {
            magicString.overwrite(match.start, match.end, replacement);
        }
    }
    return magicString.toString();
}
exports.inlineTemplate = inlineTemplate;
function updateTemplate(componentDir, match) {
    var htmlFilePath = path_1.join(componentDir, match.templateUrl);
    try {
        var templateContent = fs_1.readFileSync(htmlFilePath, 'utf8');
        return replaceTemplateUrl(match, htmlFilePath, templateContent);
    }
    catch (e) {
        logger_1.Logger.error("template error, \"" + htmlFilePath + "\": " + e);
    }
    return null;
}
function replaceTemplateUrl(match, htmlFilePath, templateContent) {
    var orgTemplateProperty = match.templateProperty;
    var newTemplateProperty = getTemplateFormat(htmlFilePath, templateContent);
    return match.component.replace(orgTemplateProperty, newTemplateProperty);
}
exports.replaceTemplateUrl = replaceTemplateUrl;
function updateBundledJsTemplate(context, htmlFilePath) {
    var outputDest = bundle_1.getJsOutputDest(context);
    try {
        var bundleSourceText = fs_1.readFileSync(outputDest, 'utf8');
        var newTemplateContent = fs_1.readFileSync(htmlFilePath, 'utf8');
        bundleSourceText = replaceBundleJsTemplate(bundleSourceText, newTemplateContent, htmlFilePath);
        if (bundleSourceText) {
            fs_1.writeFileSync(outputDest, bundleSourceText, { encoding: 'utf8' });
            return true;
        }
    }
    catch (e) {
        logger_1.Logger.debug("templateUpdate, error opening bundle js: " + e);
    }
    return false;
}
function replaceBundleJsTemplate(bundleSourceText, newTemplateContent, htmlFilePath) {
    var prefix = getTemplatePrefix(htmlFilePath);
    var startIndex = bundleSourceText.indexOf(prefix);
    if (startIndex === -1) {
        return null;
    }
    var suffix = getTemplateSuffix(htmlFilePath);
    var endIndex = bundleSourceText.indexOf(suffix, startIndex + 1);
    if (endIndex === -1) {
        return null;
    }
    var oldTemplate = bundleSourceText.substring(startIndex, endIndex + suffix.length);
    var newTemplate = getTemplateFormat(htmlFilePath, newTemplateContent);
    while (bundleSourceText.indexOf(oldTemplate) > -1) {
        bundleSourceText = bundleSourceText.replace(oldTemplate, newTemplate);
    }
    return bundleSourceText;
}
exports.replaceBundleJsTemplate = replaceBundleJsTemplate;
function getTemplateFormat(htmlFilePath, content) {
    // turn the template into one line and espcape single quotes
    content = content.replace(/\r|\n/g, '\\n');
    content = content.replace(/\'/g, '\\\'');
    return getTemplatePrefix(htmlFilePath) + "'" + content + "'" + getTemplateSuffix(htmlFilePath);
}
exports.getTemplateFormat = getTemplateFormat;
function getTemplatePrefix(sourcePath) {
    return "template:/*ion-inline-start:\"" + sourcePath + "\"*/";
}
function getTemplateSuffix(sourcePath) {
    return "/*ion-inline-end:\"" + sourcePath + "\"*/";
}
function getTemplateMatch(str) {
    var match = COMPONENT_REGEX.exec(str);
    if (match) {
        return {
            start: match.index,
            end: match.index + match[0].length,
            component: match[0],
            templateProperty: match[3],
            templateUrl: match[5].trim()
        };
    }
    return null;
}
exports.getTemplateMatch = getTemplateMatch;
var COMPONENT_REGEX = /Component\s*?\(\s*?(\{([\s\S]*?)(\s*templateUrl\s*:\s*(['"`])(.*?)(['"`])\s*?)([\s\S]*?)}\s*?)\)/m;
